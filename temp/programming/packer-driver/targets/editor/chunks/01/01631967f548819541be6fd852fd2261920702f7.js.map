{"version":3,"sources":["file:///Users/dengyaqi/Desktop/CocosProject/cocos-plane-war-master/assets/Scripts/bird/BirdRollSFCtrl.ts"],"names":["_decorator","Component","Node","CCInteger","BirdCtrl","ccclass","property","BirdRollSFCtrl","start","item","node","children","on","EventType","MOUSE_DOWN","bird","fly","update","deltaTime","setPosition","position","x","speed","y","width"],"mappings":";;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,S,OAAAA,S;;AAD7BC,MAAAA,Q,iBAAAA,Q;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;gCAGjBO,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ,CAACH,SAAD,C,UAGRG,QAAQ,CAACH,SAAD,C,UAGRG,QAAQ;AAAA;AAAA,+B,2BATb,MACaC,cADb,SACoCN,SADpC,CAC8C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAW1CO,QAAAA,KAAK,GAAG;AACJ,eAAK,IAAIC,IAAT,IAAiB,KAAKC,IAAL,CAAUC,QAA3B,EAAqC;AACjCF,YAAAA,IAAI,CAACG,EAAL,CAAQV,IAAI,CAACW,SAAL,CAAeC,UAAvB,EAAmC,MAAM;AAAA;;AACrC,iCAAKC,IAAL,gCAAWC,GAAX;AACH,aAFD;AAGH;AACJ;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,eAAK,IAAIT,IAAT,IAAiB,KAAKC,IAAL,CAAUC,QAA3B,EAAqC;AACjC;AACAF,YAAAA,IAAI,CAACU,WAAL,CAAiBV,IAAI,CAACW,QAAL,CAAcC,CAAd,GAAkB,KAAKC,KAAL,GAAaJ,SAAhD,EAA2DT,IAAI,CAACW,QAAL,CAAcG,CAAzE,EAFiC,CAGjC;;AACA,gBAAId,IAAI,CAACW,QAAL,CAAcC,CAAd,GAAkB,CAAC,KAAKG,KAA5B,EAAmC;AAC/Bf,cAAAA,IAAI,CAACU,WAAL,CAAiBV,IAAI,CAACW,QAAL,CAAcC,CAAd,GAAkB,KAAKG,KAAL,GAAa,CAAhD,EAAmDf,IAAI,CAACW,QAAL,CAAcG,CAAjE;AACH;AACJ;AACJ;;AA5ByC,O;;;;;iBAGlB,E;;;;;;;iBAGA,G;;;;;;;iBAGC,I","sourcesContent":["import { BirdCtrl } from './BirdCtrl';\nimport { _decorator, Component, Node, CCInteger } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BirdRollSFCtrl')\nexport class BirdRollSFCtrl extends Component {\n\n    @property(CCInteger)\n    private speed: number = 20;\n\n    @property(CCInteger)\n    private width: number = 400;\n\n    @property(BirdCtrl)\n    private bird: BirdCtrl = null;\n\n    start() {\n        for (let item of this.node.children) {\n            item.on(Node.EventType.MOUSE_DOWN, () => {\n                this.bird?.fly();\n            })\n        }\n    }\n\n    update(deltaTime: number) {\n        for (let item of this.node.children) {\n            // 移动 Sprite\n            item.setPosition(item.position.x - this.speed * deltaTime, item.position.y);\n            // 重复 Sprite\n            if (item.position.x < -this.width) {\n                item.setPosition(item.position.x + this.width * 2, item.position.y);\n            }\n        }\n    }\n}\n\n"]}